#!/usr/bin/env python3

import rospy
from astar_proj3_part2 import *
import math
import time
import numpy as np
import tf
from geometry_msgs.msg import Twist
from tf.transformations import euler_from_quaternion

class Control_node(object):

    def __init__(self):
        self.vel_pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
        self.listener_tf = tf.TransformListener()

    def pause(self):
        self.listener_tf.waitForTransform('/odom', '/base_footprint', rospy.Time(), rospy.Duration(500))


    def cmd_vel(self, linear_velocity, angular_velocity):
        vel_msg = Twist()
        vel_msg.linear.x = linear_velocity
        vel_msg.angular.z = angular_velocity
        self.vel_pub.publish(vel_msg)

    def transform_lookup(self):
        (linear, angular) = self.listener_tf.lookupTransform('/odom', '/base_footprint', rospy.Time(0))
        x, y, z = linear
        roll, pitch, yaw = euler_from_quaternion(angular)
        return x, y, yaw


def main():
    rospy.init_node('bchukkal_jkatak73')
    rospy.loginfo('Press Ctrl + C to exit')

    s_x = 1
    s_y = 1
    g_x = 9.5
    g_y = 9.5
    s_t = 30
    robot_radius  = 0.038
    clearance = input("\nEnter obstacle clearance for robot ")
    clearance = float(clearance)
  
    Rpms = input("Enter left wheel and right wheel RPMs")
    RPM1,RPM2 = Rpms.split()
    RPM1 = int(RPM1)
    RPM2 = int(RPM2)
   
    timer_start = time.time()

    c2g = dist((s_x,s_y), (g_x, g_y))
    total_cost =  c2g
    start_node = Node(s_x, s_y,-1,s_t,0,0,0,0,c2g,total_cost)
    goal_node = Node(g_x, g_y, -1,0,0,0,0,c2g,0,total_cost)

    flag,Node_List,Path_List = A_star_algorithm(start_node, goal_node,RPM1,RPM2,robot_radius,clearance)
                    
    if (flag)==1:
        x_path,y_path,theta_path,RPM_Left,RPM_Right = Backtrack(goal_node)
    else:
        print("not found")
        exit(-1)
    
    timer_start = time.time()

    c2g = dist((s_x,s_y), (g_x, g_y))
    total_cost =  c2g
    start_node = Node(s_x, s_y,-1,s_t,0,0,0,0,c2g,total_cost)
    goal_node = Node(g_x, g_y, -1,0,0,0,0,c2g,0,total_cost)

    flag,Node_List,Path_List = A_star_algorithm(start_node, goal_node,RPM1,RPM2,robot_radius,clearance)
                    
    if (flag)==1:
        x_path,y_path,theta_path,RPM_Left,RPM_Right = Backtrack(goal_node)
    else:
        print("Goal node not found")
        exit(-1)

    print('\n Path found sucessfully')
    print('\n Waiting to publish cmd_vel msgs')

    rospy.sleep(10)

    print('\n publishing cmd_vel msgs')
    control_node_object = Control_node()
    control_node_object.pause()
    rate = rospy.Rate(1)

    r = 0.038 #in metres
    L = 0.354 #in metres
    dt = 10
    pi = math.pi

    print (len(x_path))
    print (theta_path)

    for i in range(len(x_path)):
        UL = RPM_Left[i]
        UR = RPM_Right[i]

        theta = theta_path[i]

        pi = math.pi

        UL = UL*2*pi/60
        UR = UR*2*pi/60

        thetan = 3.14 * theta / 180

        theta_dot = (r / L) * (UR - UL) 

        velocity_value = (r / 2) * (UL + UR)
        velocity_value = velocity_value*10

        xn, yn, yaw = control_node_object.transform_lookup()
        yaw = (yaw)*180/np.pi
        print(theta)
        print (yaw)

        diff = ((theta - yaw) + 180) % 360 - 180

        print("velocity value: ", velocity_value, "theta_dot: ", theta_dot, "diff: ", diff)
        control_node_object.cmd_vel(velocity_value, theta_dot + 0.005 * diff)
        rate.sleep()

    control_node_object.cmd_vel(0, 0)
    print ('successfully reached')


if __name__ == '__main__':
    try: main()
    except rospy.ROSInterruptException:
        rospy.loginfo("Node has been terminated")

    
